# Task ID: 5
# Title: Optimize Travel Time Calculation with Bulk API Requests
# Status: done
# Dependencies: 1
# Priority: medium
# Description: Refactor the travel time calculation to use bulk API requests to the Google Maps Distance Matrix API instead of individual requests per pair.
# Details:
Modify `apps/scheduler/src/scheduler/payload.ts` to collect all required origin-destination pairs and make bulk requests to the Google Maps Distance Matrix API. Update `apps/scheduler/src/google/maps.ts` to support these bulk requests efficiently. Implement caching of travel times to reduce API calls. This optimization should significantly reduce the number of API calls and improve performance.

# Test Strategy:
Create unit tests for the bulk request logic. Measure and compare API call counts and performance between the current implementation and the optimized version using representative test data.

# Subtasks:
## 1. Analyze and refactor origin-destination pair collection [done]
### Dependencies: None
### Description: Modify the scheduler payload generator to collect all origin-destination pairs before making API requests
### Details:
Update `apps/scheduler/src/scheduler/payload.ts` to identify all places where travel time calculations are needed. Refactor the code to collect all origin-destination pairs in a data structure (like an array of {origin, destination} objects) before initiating any API calls. This will require analyzing the current flow of travel time requests and modifying the code to defer actual API calls until all pairs are collected. Ensure the collection logic maintains any contextual information needed to process the results later.

## 2. Implement bulk request functionality in Maps API module [done]
### Dependencies: 5.1
### Description: Update the Google Maps API module to support sending multiple origin-destination pairs in a single request
### Details:
Modify `apps/scheduler/src/google/maps.ts` to add a new function like `getDistanceMatrixBulk()` that accepts arrays of origins and destinations. Implement proper request formatting according to the Google Maps Distance Matrix API documentation for bulk requests. The function should handle API limits (e.g., maximum 25 origins Ã— 25 destinations per request) by batching requests if necessary. Ensure proper error handling and response parsing to return results in a consistent format that matches the existing individual request function.

## 3. Implement travel time caching mechanism [done]
### Dependencies: 5.2
### Description: Create a caching system to store and retrieve travel time results to reduce redundant API calls
### Details:
Implement a caching mechanism in `apps/scheduler/src/google/maps.ts` that stores travel time results using a unique key generated from origin-destination pairs. Before making API calls, check if results already exist in the cache. The cache should have configurable expiration times since travel times can change. Consider using an in-memory cache for the current session and optionally a persistent cache (database or file-based) for longer-term storage. Include methods to invalidate cache entries when needed.

## 4. Integrate bulk requests and caching with scheduler logic [done]
### Dependencies: 5.1, 5.2, 5.3
### Description: Connect the new bulk request and caching functionality with the scheduler's workflow
### Details:
Update the scheduler logic in `apps/scheduler/src/scheduler/payload.ts` to use the new bulk request functionality. Modify the code to first collect all needed origin-destination pairs, then check the cache for existing results, make bulk API requests only for pairs not in the cache, store new results in the cache, and finally use all results (from cache and new requests) to complete the scheduling process. Add logging to track performance improvements and API call reduction. Test the implementation thoroughly to ensure it produces identical results to the previous implementation while making fewer API calls.

