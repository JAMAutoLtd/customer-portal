# Task ID: 2
# Title: Implement Availability Gap Modeling for Optimizer
# Status: done
# Dependencies: 1
# Priority: high
# Description: Develop logic to model unavailable periods within a technician's workday as constraints for the optimizer.
# Details:
Enhance `apps/scheduler/src/scheduler/payload.ts` to identify unavailability gaps from the calculated windows and generate corresponding fixed-time 'dummy break' `OptimizationItem`s and `OptimizationFixedConstraint`s in the payload. These dummy items should be assigned only to the specific technician and have fixed constraints forcing them to occur during the unavailable times. This ensures the optimizer respects periods of unavailability within a technician's overall workday. Update the payload structure in `apps/scheduler/src/types/optimization.types.ts` if needed to support this enhancement.

# Test Strategy:
Create unit tests that verify the payload generation correctly identifies gaps in availability and creates appropriate dummy break items with fixed constraints. Test various scenarios including technicians with multiple availability windows and locked jobs creating gaps.

# Subtasks:
## 1. Analyze existing payload structure and identify extension points [done]
### Dependencies: None
### Description: Review the current payload generation logic and optimization types to understand how to integrate unavailability periods
### Details:
Examine `apps/scheduler/src/scheduler/payload.ts` to understand how technician availability is currently handled. Review `apps/scheduler/src/types/optimization.types.ts` to identify if any type extensions are needed to support unavailability modeling. Document the approach for representing unavailable periods as 'dummy break' items with fixed constraints. Determine where in the payload generation flow the unavailability detection and constraint creation should be inserted.

## 2. Implement logic to identify unavailability gaps [done]
### Dependencies: 2.1
### Description: Create a function to detect periods of unavailability within a technician's workday
### Details:
Develop a function in `apps/scheduler/src/scheduler/payload.ts` that analyzes a technician's availability windows and identifies gaps between them. The function should take the calculated availability windows as input and return a list of time periods representing unavailability gaps. Include logic to handle edge cases such as gaps at the beginning or end of the day, and ensure the function works correctly with different timezone configurations.

## 3. Generate dummy break items and fixed constraints [done]
### Dependencies: 2.2
### Description: Create optimization items and constraints to represent unavailable periods
### Details:
Extend the payload generation logic to create 'dummy break' `OptimizationItem` objects for each identified unavailability gap. Each dummy item should have a unique ID, be associated with the specific technician, and have appropriate duration matching the gap. Then create corresponding `OptimizationFixedConstraint` objects that force these dummy items to occur exactly during the unavailable periods. Ensure these constraints have appropriate priority to prevent the optimizer from moving them.

## 4. Integrate and test unavailability modeling [done]
### Dependencies: 2.3
### Description: Incorporate the new constraints into the optimization payload and verify correct behavior
### Details:
Update the main payload generation function to include the newly created dummy items and constraints in the optimization payload. Add appropriate logging to track the creation of these constraints. Test the implementation with various availability scenarios to ensure the optimizer correctly respects unavailable periods. Verify that real appointments are not scheduled during unavailable gaps and that the overall optimization quality is maintained.

