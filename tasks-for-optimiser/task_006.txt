# Task ID: 6
# Title: Implement Predictive Traffic for Future Planning Days
# Status: done
# Dependencies: 5
# Priority: medium
# Description: Enhance the travel time calculation to use predictive traffic data for future planning days.
# Details:
Modify `apps/scheduler/src/google/maps.ts` to accept and use a future `departureTime` parameter when calculating travel times. Update `apps/scheduler/src/scheduler/payload.ts` to pass appropriate future departure times for overflow planning passes. This will leverage Google Maps' predictive traffic capabilities for more accurate travel time estimates on future days.

# Test Strategy:
Create unit tests that verify the correct departure time is passed to the Google Maps API for different planning days. Compare travel time estimates between real-time and predictive traffic for the same routes to validate the implementation.

# Subtasks:
## 1. Modify maps.ts to accept departureTime parameter [done]
### Dependencies: None
### Description: Update the Google Maps API interface in maps.ts to accept an optional departureTime parameter for future planning
### Details:
Modify the function signatures in `apps/scheduler/src/google/maps.ts` to accept an optional departureTime parameter of type Date. Update the Google Maps API calls to include this parameter when provided. The departureTime should be passed to the Google Maps API as a Unix timestamp (seconds since epoch) as required by their API. Ensure backward compatibility by making the parameter optional with the current behavior (real-time traffic) as the default when no departureTime is provided.

## 2. Update travel time calculation functions to use departureTime [done]
### Dependencies: 6.1
### Description: Modify travel time calculation functions to properly utilize the departureTime parameter
### Details:
Update all functions in maps.ts that calculate travel times to properly use the departureTime parameter. This includes functions like calculateTravelTime, getDirections, or any other function that makes calls to the Google Maps API. Ensure that when a departureTime is provided, it's correctly formatted and passed to the underlying API calls. Add appropriate type definitions for any modified function signatures. Test that the functions correctly handle both cases: with and without departureTime.

## 3. Update payload.ts to calculate future departure times [done]
### Dependencies: 6.1, 6.2
### Description: Modify the scheduler payload generation to calculate appropriate future departure times for planning days
### Details:
Update `apps/scheduler/src/scheduler/payload.ts` to calculate future departure times based on the planning day. Implement logic to determine the appropriate timestamp for each future planning day. For each appointment or travel segment that needs a travel time calculation, compute the expected departure time on the future date and pass it to the maps functions. Consider time zones and daylight saving time changes when calculating future timestamps. Ensure that the current day's calculations continue to use real-time traffic data.

## 4. Integrate predictive traffic into overflow planning passes [done]
### Dependencies: 6.1, 6.2, 6.3
### Description: Ensure overflow planning passes correctly utilize predictive traffic data for future days
### Details:
Update the overflow planning logic to properly utilize the predictive traffic capabilities. Modify any code that handles planning for future days to pass the appropriate departureTime to travel time calculations. Test the entire flow to ensure that when planning for future days, the system correctly uses predictive traffic data rather than current traffic conditions. Add logging to verify that future departure times are being correctly calculated and passed to the Google Maps API. Document the changes in comments and update any relevant documentation about how the system now handles traffic predictions for future planning days.

