---
description: 
globs: 
alwaysApply: false
---
### 🔄 Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints. There will often be a PLANNING.md specific to the directory we're working in as well as the main directory PLANNING.md - Read both.
- **Check `TASK.md`** before starting a new task. If the task isn’t listed, add it with a brief description and today's date. There will often be a TASK.md specific to the directory we're working in as well as the main directory TASK.md - Read both.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.
-**Always read `DATABASE.md`** to understand the structure of our database and how we can implement it where necessary, or suggest modifications during development of features.

### 🧱 Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).
- **Notice places where our database is insufficent** while writing code and stop to recommend adding or revising tables or fields.

### 🧪 Testing & Reliability
- **Always create Jest unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ✅ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- **Add new sub-tasks or TODOs discovered during development** to `TASK.md` under a “Discovered During Work” section.

### 📎 Style & Conventions
- **Use JavaScript** as the primary language.

### 📚 Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.

### 🧠 AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** – only use known, verified JavaScript packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
