---
description: 
globs: optimize-service/**,src/scheduler/optimize.ts,src/scheduler/payload.ts,src/types/optimization.types.ts
alwaysApply: false
---
---
description: Describes the Python optimization microservice.
globs: ["optimize-service/**", "src/scheduler/optimize.ts", "src/scheduler/payload.ts", "src/types/optimization.types.ts"]
tags: ["optimization", "python", "fastapi", "or-tools", "microservice"]
---

# Python Optimization Service

This is a separate microservice built with FastAPI, located in the `optimize-service/` directory. Its purpose is to solve the Vehicle Routing Problem (VRP) using Google OR-Tools.

**Core Components:**

*   **Entry Point ([optimize-service/main.py](mdc:optimize-service/main.py))**:
    *   Defines the FastAPI application.
    *   Includes a `/health` endpoint.
    *   The main logic is in the `/optimize-schedule` (POST) endpoint.
*   **Models ([optimize-service/models.py](mdc:optimize-service/models.py))**:
    *   Defines Pydantic models (`OptimizationRequestPayload`, `OptimizationResponsePayload`, etc.) that mirror the TypeScript types in [src/types/optimization.types.ts](mdc:src/types/optimization.types.ts). These are used for request validation and response serialization.
*   **Dockerfile ([optimize-service/Dockerfile](mdc:optimize-service/Dockerfile))**: Defines the container build process.
*   **Requirements ([optimize-service/requirements.txt](mdc:optimize-service/requirements.txt))**: Lists Python dependencies (FastAPI, Uvicorn, OR-Tools).

**Optimization Logic (`/optimize-schedule` endpoint):**

1.  **Receives Payload**: Accepts a JSON payload prepared by the Node.js service ([src/scheduler/payload.ts](mdc:src/scheduler/payload.ts)).
2.  **Sets up OR-Tools**: Initializes `RoutingIndexManager` and `RoutingModel`.
3.  **Time Handling**: Converts absolute ISO timestamps from the payload into relative seconds based on an epoch (earliest technician start time) for OR-Tools processing. Converts results back to ISO strings.
4.  **Callbacks & Dimensions**: Defines callbacks for travel time, service time, and arc costs (including technician eligibility checks). Adds a `TimeDimension` for handling time windows.
5.  **Constraints**: Applies technician start/end times, item earliest start times, fixed job times, and uses `AddDisjunction` with penalties to allow dropping lower-priority items.
6.  **Solves**: Configures and runs the OR-Tools solver.
7.  **Processes Results**: Extracts routes, calculates arrival/start/end times for each stop, and constructs the `OptimizationResponsePayload`.

**Interaction:**

The Node.js service calls this microservice's `/optimize-schedule` endpoint via HTTP POST using the `callOptimizationService` function in [src/scheduler/optimize.ts](mdc:src/scheduler/optimize.ts).


