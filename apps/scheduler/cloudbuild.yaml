steps:
  # Install pnpm globally and run install from the workspace root (/workspace)
  - name: 'gcr.io/cloud-builders/npm' # Use npm image which includes node
    entrypoint: 'bash'
    # Cloud Build steps run in /workspace by default, which contains the repo checkout
    args:
      - '-c'
      - |
        npm install -g pnpm
        echo "Running pnpm install in /workspace (allowing lockfile update)..."
        # TEMPORARY DEBUGGING: Remove --frozen-lockfile to bypass outdated check
        pnpm install --no-frozen-lockfile

  # Build the Node.js application using pnpm workspace filter
  - name: 'gcr.io/cloud-builders/npm' # Use npm image which includes node
    entrypoint: 'bash'
    # Run from /workspace
    args:
      - '-c'
      - |
        # pnpm should already be installed globally from the previous step
        echo "Running pnpm build for scheduler using filter..."
        # Filter the build command to target only the scheduler package
        # Verify package name in apps/scheduler/package.json is @jamauto/scheduler
        pnpm --filter @jamauto/scheduler run build

  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:$COMMIT_SHA',
        '-t',
        'us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:latest', # Also tag latest
        # Build context is the scheduler app directory within the workspace
        '/workspace/apps/scheduler',
        '-f',
        # Dockerfile path within the workspace
        '/workspace/apps/scheduler/Dockerfile'
      ]

  # Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:$COMMIT_SHA']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:latest'] # Also push latest

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run',
        'deploy',
        'scheduler-node', # Service name
        '--project=$PROJECT_ID',
        '--region=us-west1',
        '--image=us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:$COMMIT_SHA',
        '--platform=managed',
        '--port=8080',
        '--no-allow-unauthenticated', # Require authentication
        '--min-instances=0',
        '--max-instances=2',
        '--cpu=1',
        '--memory=512Mi',
        # Secrets (adjust versions if needed)
        '--update-secrets=SUPABASE_ANON_KEY=supabase-anon-key:latest,GOOGLE_MAPS_API_KEY=google-maps-api-key:latest',
        # Environment variables - Use substitutions from trigger
        '--set-env-vars=OPTIMIZATION_SERVICE_URL=$_OPTIMIZATION_SERVICE_URL,SUPABASE_URL=$_SUPABASE_URL'
      ]

images:
  - 'us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:$COMMIT_SHA'
  - 'us-west1-docker.pkg.dev/$PROJECT_ID/optimize-service/scheduler-node:latest'

# Define substitutions expected from the trigger (or provide defaults)
substitutions:
  _OPTIMIZATION_SERVICE_URL: 'https://scheduler-optimize-service-vyo5f2aa2a-uw.a.run.app' # Default or placeholder
  _SUPABASE_URL: 'https://rpwazhpyylwqfbxcwtsy.supabase.co/' # Default or placeholder

options:
  logging: CLOUD_LOGGING_ONLY 
