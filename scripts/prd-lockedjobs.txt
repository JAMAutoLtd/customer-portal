Product Requirements Document: Robust Handling of Fixed Technician Unavailability

1. Introduction
----------------

1.1. Problem Statement:
Our current scheduling system faces challenges in reliably handling fixed periods of technician unavailability, particularly those stemming from 'locked' jobs (e.g., 'en_route', 'in_progress') and database-defined exceptions (e.g., time off). While the scheduler module (`apps/scheduler/`) correctly calculates the resulting gaps in a technician's availability, this information is not effectively communicated to or enforced by the optimization module (`apps/optimiser/`). This leads to the optimizer scheduling new jobs during these periods of known unavailability, resulting in incorrect schedules, operational inefficiencies, and failing integration tests (e.g., `locked_job_impact.test.ts`).

1.2. Goal:
To implement a robust, cohesive, and efficient system for modeling and enforcing all types of fixed-time technician unavailability within the optimizer. This includes unavailability due to:
    a. Jobs in 'locked' states (e.g., 'en_route', 'in_progress') with a defined `estimated_sched` for the current planning day.
    b. Technician availability exceptions defined in the database (e.g., approved time off, custom non-working hours).
The solution should ensure that the optimizer treats these unavailability periods as immutable constraints, scheduling other work strictly around them.

1.3. Scope:
    - This PRD covers modifications to the scheduler (`apps/scheduler/`) for payload generation and the optimizer (`apps/optimiser/`) for constraint interpretation and enforcement.
    - It focuses on *fixed* blocks of unavailability. Flexible breaks (e.g., "lunch between 12-2 PM") are out of scope for this specific PRD but the solution should be mindful of future compatibility.

1.4. Glossary:
    - **Locked Job:** A job that is currently being actioned (e.g., status 'en_route', 'in_progress') and has an `estimated_sched`, making the assigned technician unavailable for other tasks during its duration plus travel.
    - **DB Exception:** A period of unavailability defined in the database (e.g., `technician_availability_exceptions` table).
    - **Dummy Break Item:** An `OptimizationItem` created by the scheduler to represent a period of fixed unavailability. This is not a real job but a modeling construct.
    - **Fixed Constraint:** An `OptimizationFixedConstraint` that specifies an exact start time and duration for an `OptimizationItem`.
    - **Scheduler:** The service responsible for preparing data for optimization (`apps/scheduler/`).
    - **Optimizer:** The service responsible for solving the VRP (`apps/optimiser/`).
    - **Availability Gap:** A period within a technician's shift when they are not available to perform new jobs.

2. Current System Analysis (Brief)
---------------------------------

2.1. `fixed_time` Jobs:
Jobs explicitly marked with `status: 'fixed_time'` and a `fixed_schedule_time` are generally handled by setting an `isFixedTime = true` flag and `fixedTimeISO` on their `OptimizationItem` in the payload. The optimizer then applies a `SetRange(start, start)` constraint to their node, effectively fixing their start time. This mechanism appears largely functional.

2.2. Locked Jobs & DB Exceptions:
The scheduler (`apps/scheduler/src/scheduler/availability.ts`) correctly calculates non-contiguous availability windows for technicians by considering locked jobs and DB exceptions. It identifies the resulting "gaps."
The scheduler (`apps/scheduler/src/scheduler/payload.ts`) then attempts to model these gaps by:
    a. Creating "dummy break items" (`OptimizationItem` with IDs like `break_{techId}_{index}`).
    b. Creating corresponding `OptimizationFixedConstraint`s for these dummy items.
However, a key failure point has been identified: the optimizer (`apps/optimiser/main.py`) does not currently recognize or correctly apply the fixed constraints specifically to these `break_...` items. The constraints are effectively ignored for these dummy items.

3. Proposed Solution: "Robust Dummy Break Item Enforcement"
--------------------------------------------------------

This solution refines and correctly implements the existing "dummy break item" strategy. The core principle is to treat all fixed unavailability periods as mandatory, zero-travel-time, fixed-duration "tasks" (represented by dummy break items) that the specifically assigned technician *must* conceptually "perform" at the exact specified time.

4. Detailed Requirements
------------------------

4.1. Scheduler-Side Modifications (`apps/scheduler/src/scheduler/payload.ts` and related utilities):

    4.1.1. **Dedicated Dummy Break Location:**
        a.  A single, global dummy `OptimizationLocation` shall be defined and consistently used for all dummy break items.
            - ID: `'dummy_break_loc'` (or similar constant).
            - Coordinates: Arbitrary (e.g., `{ lat: -999, lng: -999 }`) as travel time will be zero.
        b.  This dummy location shall be added to the `payload.locations` array sent to the optimizer.
        c.  Its `locationIndex` must be tracked for use in dummy break items and travel matrix adjustments.

    4.1.2. **Travel Time Matrix Modification:**
        a.  After the `travelTimeMatrix` is computed (e.g., by `getBulkTravelTimes`), it must be modified.
        b.  Travel time *to* the `dummy_break_loc` index *from* all other locations (including other dummy break locations, if multiple were used, though one is recommended) shall be set to 0.
        c.  Travel time *from* the `dummy_break_loc` index *to* all other locations shall be set to 0.

    4.1.3. **Dummy Break Item (`OptimizationItem`) Generation:**
        a.  For each availability gap identified (from `findAvailabilityGaps` which processes outputs of `applyLockedJobsToWindows` and `calculateWindowsForTechnician`):
            i.  Generate a unique `OptimizationItem.id` (e.g., `break_{techId}_{gapIndex}`).
            ii. Set `OptimizationItem.locationIndex` to the index of the `'dummy_break_loc'`.
            iii.Set `OptimizationItem.durationSeconds` to the calculated duration of the gap.
            iv. Set `OptimizationItem.eligibleTechnicianIds = [tech.id]` where `tech.id` is the technician for whom the gap applies.
            v.  If the `OptimizationItem` model includes a field like `serviceTimeSeconds`, it should be set equal to `durationSeconds` for break items. This makes the "service" at the dummy node occupy the entire break duration.
            vi. `earliestStartTimeISO` is not strictly necessary for these items as their time will be fixed by an `OptimizationFixedConstraint`.
        b.  All generated dummy break items shall be added to the `payload.items` array.

    4.1.4. **Fixed Constraint (`OptimizationFixedConstraint`) Generation for Dummy Breaks:**
        a.  For each dummy break item generated:
            i.  Create an `OptimizationFixedConstraint`.
            ii. `itemId` must match the ID of the corresponding dummy break item.
            iii.`fixedTimeISO` must be the absolute UTC start time of the availability gap.
            iv. `durationSeconds` must be the duration of the availability gap.
            v.  `assignedTechnicianId` must be the `id` of the technician the break applies to.
        b.  All such generated fixed constraints shall be added to the `payload.fixedConstraints` array.

4.2. Optimizer-Side Modifications (`apps/optimiser/main.py`):

    4.2.1. **Pre-computation:**
        a.  Maintain the existing `fixed_constraints_map = {fc.itemId: fc for fc in payload.fixedConstraints}` for efficient lookup.

    4.2.2. **Constraint Application Logic:**
        The main loop processing `payload.items` to apply constraints needs to differentiate between regular items and dummy break items.
        a.  **Identify Dummy Break Items:** Check if `item.id.startswith('break_')`.
        b.  **For Dummy Break Items:**
            i.  Retrieve the corresponding `constraint` from `fixed_constraints_map` using `item.id`.
            ii. If the constraint exists and `constraint.assignedTechnicianId` matches the technician associated with the current vehicle being processed by the optimizer (or if applying constraints globally before vehicle-specific logic, this check is implicit if eligibility is handled later):
                1.  Calculate `break_start_seconds_rel = iso_to_seconds(constraint.fixedTimeISO) - planning_epoch_seconds`.
                2.  Calculate `break_end_seconds_rel = break_start_seconds_rel + constraint.durationSeconds`.
                3.  Apply the fixed time constraint to the break item's node:
                    `time_dimension.CumulVar(solver_index_for_break_item).SetRange(break_start_seconds_rel, break_end_seconds_rel)`
                4.  **Mandatory Performance:** To ensure the break item is "performed" by the assigned technician if that technician's route is used, add:
                    `routing.AddDisjunction([solver_index_for_break_item], 0)`
                    (This adds a disjunction with a penalty of 0, meaning it *must* be included in the solution if possible for the vehicle visiting nodes in that disjunction list - here, only the break node itself. This makes it mandatory for the route that includes this node.)
            iii.Log clearly when break constraints are applied.
        c.  **For Regular Fixed Jobs (not breaks):**
            i.  Identify these (e.g., `item.id in fixed_constraints_map and not item.id.startswith('break_')` OR an `item.isFixedTime == true` flag if that convention is also used for non-break fixed items).
            ii. Apply `time_dimension.CumulVar(solver_index_for_job).SetRange(fixed_job_start_rel, fixed_job_start_rel)` (start time fixed, duration is handled by service time at the node).
            iii.Ensure these are also made mandatory via `routing.AddDisjunction([solver_index_for_job], 0)`.
        d.  **For Regular Schedulable Items (not fixed, not breaks):**
            i.  Apply `earliestStartTimeISO` constraints as `time_dimension.CumulVar(solver_index).SetMin(earliest_start_rel)`.
            ii. Apply standard disjunctions with appropriate penalties: `routing.AddDisjunction([solver_index], penalty_value)`.

    4.2.3. **Technician Eligibility for Breaks:**
        a.  The scheduler sets `eligibleTechnicianIds = [tech.id]` for each break item.
        b.  The optimizer's general mechanism for enforcing item eligibility (e.g., using `routing.VehicleVar(item_index).SetValues([...allowed_vehicle_indices...])` or by manipulating arc costs for non-eligible vehicles) must ensure that only the assigned technician can "visit" or be routed through the `solver_index` of their specific break item. This is critical. If no such general mechanism exists, it needs to be added or specifically handled for break items.

    4.2.4. **Result Processing:**
        a.  When constructing the final list of `RouteStop`s for each vehicle's route from the optimizer's solution, items whose IDs start with `'break_'` must be filtered out. They are modeling constructs and not actual jobs to be reported to the end-user or consuming systems.

4.3. Interaction with Other Constraints:

    4.3.1. **Technician Overall Workday:** The overall `earliestStartTimeISO` and `latestEndTimeISO` for a technician (applied to `routing.Start(vehicle_index)` and `routing.End(vehicle_index)`) will still define the absolute boundaries of their shift. Dummy breaks will carve out unavailable periods *within* these boundaries.

    4.3.2. **`fixed_assignment` (Job to Tech, not Time):** This remains an eligibility constraint. If a job is fixed-assigned but not fixed-time, it will be routed to the correct tech. If that tech has breaks, the job will be scheduled around them.

5. Testing and Validation
-------------------------
A comprehensive test suite is required:
    a.  Re-validate and ensure `tests/integration/scheduler/locked_job_impact.test.ts` passes.
    b.  New tests for unavailability from DB exceptions:
        i.  Full day off for a technician.
        ii. Partial day off (e.g., morning only).
        iii.Multiple distinct unavailability blocks for a single tech on the same day.
    c.  Scenarios where a break is at the very start or end of a technician's shift.
    d.  Scenarios with no actual schedulable jobs but technicians have defined breaks (ensure correct empty/no-op routes are generated).
    e.  Scenarios with multiple technicians, each having different break/unavailability patterns.
    f.  Verify travel times are not affected by the presence of dummy break items.

6. Out of Scope (Future Considerations)
---------------------------------------
    a.  Modeling flexible breaks (e.g., "30-minute lunch between 12 PM and 2 PM") using OR-Tools features like `SetBreakIntervalsOfVehicle`. The current PRD focuses solely on *fixed, non-negotiable* unavailability periods.
    b.  Dynamic changes to breaks once optimization has begun (this PRD assumes breaks are known at the start of the optimization pass).

7. References
-------------
    - Relevant file paths:
        - `apps/scheduler/src/scheduler/payload.ts`
        - `apps/scheduler/src/scheduler/availability.ts`
        - `apps/scheduler/src/services/maps/google.ts` (or equivalent for travel matrix)
        - `apps/scheduler/src/types/optimization.types.ts`
        - `apps/optimiser/main.py`
        - `apps/optimiser/models.py`
    - OR-Tools documentation regarding Time Windows, Disjunctions, and `CumulVar.SetRange`. Use context7 tool to learn about this.

This PRD outlines a path to a more reliable scheduling system by ensuring all fixed unavailability is correctly modeled and strictly enforced by the optimizer.

8. Appendix: Technical Reference & Definitions
--------------------------------------------

This appendix expands on the technical components, data structures, and logic changes outlined in the PRD to ensure a common understanding for implementation.

8.1. Key Data Structures & Modifications:

    8.1.1. `OptimizationLocation` (Type: `apps/scheduler/src/types/optimization.types.ts` & `apps/optimiser/models.py`):
        - **Addition:** One new global `OptimizationLocation` instance will be programmatically added by the scheduler.
            - `id`: `'dummy_break_loc'` (or a configured constant).
            - `index`: A unique numerical index assigned by the scheduler, distinct from all real job or depot locations.
            - `coords`: Arbitrary geographical coordinates (e.g., `{ lat: -999, lng: -999 }`). These coordinates are placeholders and will not be used for travel calculations due to modifications in the `travelTimeMatrix`.
        - **Impact:** This location serves as the designated node in the VRP for all dummy break items.

    8.1.2. `TravelTimeMatrix` (Type: `apps/scheduler/src/types/optimization.types.ts`, Data: Generated in `payload.ts`):
        - **Modification Logic (in `payload.ts`):** After the matrix is populated with actual travel times (e.g., from Google Maps API via `getBulkTravelTimes`), it will be modified:
            - For the row corresponding to the `dummy_break_loc` index, all travel times *from* this dummy location *to* all other locations (including itself) will be set to 0.
            - For the column corresponding to the `dummy_break_loc` index, all travel times *to* this dummy location *from* all other locations (including itself) will be set to 0.
        - **Impact:** Ensures that routing a technician to or from a dummy break item incurs no travel time cost or duration in the optimizer's calculations.

    8.1.3. `OptimizationItem` (Type: `apps/scheduler/src/types/optimization.types.ts` & `apps/optimiser/models.py`):
        - **New Instances ("Dummy Break Items"):** For each identified availability gap for a technician, a new `OptimizationItem` instance will be created by the scheduler.
            - `id`: String. Formatted as `break_{technicianId}_{targetDateString}_{gapIndex}` (e.g., `break_123_2024-07-30_0`). This ensures uniqueness.
            - `locationIndex`: Number. Set to the index of the global `'dummy_break_loc'`.
            - `durationSeconds`: Number. The duration of the availability gap in seconds. This represents the time the technician is unavailable.
            - `serviceTimeSeconds` (If field exists and is used by optimizer for node duration): Should be set equal to `durationSeconds`. If the optimizer derives node duration primarily from `fixedConstraint.durationSeconds` when a constraint is present, this field might be less critical for breaks, but setting it provides clarity.
            - `priority`: Number. Can be set to a high logical priority (e.g., 0 or 1) to signify its importance, though its mandatory nature will primarily be enforced by `AddDisjunction` with zero penalty.
            - `eligibleTechnicianIds`: Array of numbers. Must contain *only* the ID of the technician to whom this unavailability period applies.
            - `earliestStartTimeISO`: String (Optional). Not strictly required as the `OptimizationFixedConstraint` will dictate the exact timing.
            - `isFixedTime`: Boolean (Optional). Could be set to `true` for consistency if the optimizer uses this flag to identify items needing a fixed constraint lookup, though the `item.id.startswith('break_')` check is more specific for breaks.
            - `fixedTimeISO`: String (Optional). Not strictly required on the item itself if the `OptimizationFixedConstraint` is the source of truth for timing.
        - **Addition to Payload:** These dummy break items will be added to the `payload.items` list alongside regular job items.

    8.1.4. `OptimizationFixedConstraint` (Type: `apps/scheduler/src/types/optimization.types.ts` & `apps/optimiser/models.py`):
        - **New Instances (for Dummy Breaks):** For each dummy break item, a corresponding `OptimizationFixedConstraint` will be created by the scheduler.
            - `itemId`: String. Must match the `id` of the associated dummy break `OptimizationItem`.
            - `fixedTimeISO`: String. The absolute UTC start timestamp of the availability gap.
            - `durationSeconds`: Number. The duration of the availability gap in seconds.
            - `assignedTechnicianId`: Number. The ID of the technician to whom this unavailability (and thus this constraint) applies.
        - **Addition to Payload:** These constraints will be added to the `payload.fixedConstraints` list.

    8.1.5. `OptimizationTechnician` (Type: `apps/scheduler/src/types/optimization.types.ts` & `apps/optimiser/models.py`):
        - **No direct structural changes to this type itself are required by the PRD.**
        - **Logic Change (`payload.ts`):** The calculation of `earliestStartTimeISO` and `latestEndTimeISO` for each technician will still represent the overall start of their first actual availability window and the end of their last actual availability window for the day. This provides the optimizer with the outer bounds of the technician's shift.

8.2. Key Logic Changes & Definitions:

    8.2.1. **Availability Gap Identification (`findAvailabilityGaps` in `payload.ts`):**
        - **Definition:** An "availability gap" is a continuous block of time within a technician's defined workday (between their overall earliest start and latest end) during which they are *not* available due to the subtraction of locked jobs or DB exceptions from their base availability windows.
        - **Logic:** This function iterates through a technician's sorted `TimeWindow[]` (representing actual availability slots for the day). If a time difference exists between the end of one `TimeWindow` and the start of the next, that difference is a gap. A gap can also exist after the last `TimeWindow` if it ends before the technician's `workDayEnd`.

    8.2.2. **Optimizer: Constraint Application for Dummy Break Items (`main.py`):
        - **Identification:** Optimizer will identify dummy break items by checking `if item.id.startswith('break_')`.
        - **Timing Constraint:** For each identified dummy break item, the optimizer will:
            1. Look up its corresponding `OptimizationFixedConstraint` using the `item.id` in the `fixed_constraints_map`.
            2. Calculate `break_start_seconds_rel` (relative to `planning_epoch_seconds`) from `constraint.fixedTimeISO`.
            3. Calculate `break_end_seconds_rel` (`break_start_seconds_rel + constraint.durationSeconds`).
            4. Apply `time_dimension.CumulVar(solver_index_for_break_item).SetRange(break_start_seconds_rel, break_end_seconds_rel)`.
               - This forces the "visit" to the dummy break node to occur exactly within this time window. Since the node's service time is set to the gap duration (via `item.durationSeconds` or `constraint.durationSeconds`), the node effectively consumes the entire time slot.
        - **Mandatory Performance Constraint:**
            - `routing.AddDisjunction([solver_index_for_break_item], 0)` will be applied.
            - This ensures that if the technician's route is used at all, this break item *must* be part of their route (penalty of 0 for dropping it). This makes the unavailability period non-negotiable.
        - **Technician Eligibility:** The constraint must only apply to the designated technician. This is ensured by:
            1. Scheduler: Setting `OptimizationItem.eligibleTechnicianIds = [tech.id]` for the break item.
            2. Optimizer: The optimizer's general eligibility enforcement mechanism (e.g., using `VehicleVar().SetValues()` or arc costs) will restrict this break item to the specified technician's vehicle index. If this mechanism is not generic, specific logic will be needed to ensure that only the `constraint.assignedTechnicianId`'s vehicle can be routed through this break node.

    8.2.3. **Optimizer: Handling Regular Fixed Jobs (Non-Breaks) (`main.py`):
        - **Identification:** These are items found in `fixed_constraints_map` that do *not* start with `'break_'` OR items that have an `isFixedTime == true` flag (if this convention is also used).
        - **Timing Constraint:** `time_dimension.CumulVar(solver_index_for_job).SetRange(fixed_job_start_rel, fixed_job_start_rel)` (fixes start time; duration is handled by the job's service time at its real location).
        - **Mandatory Performance Constraint:** `routing.AddDisjunction([solver_index_for_job], 0)` must also be applied to these items to ensure they are not dropped.

    8.2.4. **Optimizer: Result Filtering (`main.py` or `results.ts`):
        - **Logic:** When processing the optimizer's solution to build the sequence of `RouteStop`s for each technician, any item whose `id` starts with `'break_'` will be ignored and not included in the final route plan presented to users or downstream systems.

8.3. Removed/Superseded Logic:
    - Any previous, potentially incomplete or incorrect, mechanisms in the optimizer for handling breaks or technician unavailability that did not rely on the explicit fixed constraint approach described above will be removed or disabled.
    - The scheduler will no longer attempt to influence optimizer behavior regarding gaps by only adjusting the technician's overall `earliestStartTimeISO` / `latestEndTimeISO` if that adjustment was meant to implicitly communicate internal gaps (this was insufficient).

This technical appendix should clarify the precise nature of the changes and ensure all team members are aligned on the data structures and logic involved in implementing the robust handling of fixed technician unavailability. 