# Task ID: 2
# Title: Implement optimizer payload receipt logging (FEAT-LOG-001)
# Status: done
# Dependencies: 1
# Priority: high
# Description: Add detailed logging of incoming optimization request payload details in the Python optimizer service.
# Details:
Modify apps/optimiser/main.py to add logging at the entry point of the /optimize-schedule endpoint. Log the following key details: 1) Total technician count, 2) Total item count, 3) Number of fixed constraints, 4) For each technician: their ID and time windows (earliestStartTimeISO, latestEndTimeISO), 5) For each fixed constraint: itemId and fixedTimeISO. Use Python's logging module at DEBUG level. Format logs to be easily parseable with clear key-value pairs.

# Test Strategy:
Send test requests to the optimizer endpoint and verify logs contain all required information. Check that technician time windows and fixed constraints are correctly logged with their respective IDs.

# Subtasks:
## 1. Review and Extract Required Payload Data [done]
### Dependencies: None
### Description: Analyze the /optimize-schedule endpoint's incoming request payload structure to identify and extract all required details: total technician count, total item count, number of fixed constraints, each technician's ID and time windows, and each fixed constraint's itemId and fixedTimeISO.
### Details:
Inspect the endpoint handler in apps/optimiser/main.py. Determine the exact structure of the incoming JSON payload. Write code to extract: (a) total number of technicians, (b) total number of items, (c) number of fixed constraints, (d) for each technician, their ID and time windows (earliestStartTimeISO, latestEndTimeISO), and (e) for each fixed constraint, itemId and fixedTimeISO. Ensure extraction handles missing or malformed data gracefully.

## 2. Format Log Message with Key-Value Pairs [done]
### Dependencies: 2.1
### Description: Design and implement a clear, parseable log message format using key-value pairs for all extracted payload details.
### Details:
Create a string or structured object that represents all required payload details in a consistent key-value format. Ensure the format is easily parseable (e.g., JSON or a flat string with delimiters). Include clear keys for each data point, such as technicianCount, itemCount, fixedConstraintCount, technicianId, earliestStartTimeISO, latestEndTimeISO, itemId, and fixedTimeISO.

## 3. Integrate Logging at Endpoint Entry Point [done]
### Dependencies: 2.2
### Description: Add logging to the /optimize-schedule endpoint in apps/optimiser/main.py, using Python's logging module at DEBUG level to record the formatted payload details.
### Details:
At the entry point of the /optimize-schedule endpoint, insert a logging statement using the logging module at DEBUG level. Log the formatted message containing all extracted payload details. Ensure the logger is module-level for consistency and maintainability[1][4].

## 4. Verify Logging Output and Adjust Configuration [done]
### Dependencies: 2.3
### Description: Test the logging implementation with various payloads to ensure all required details are logged correctly and in the desired format. Adjust logging configuration as needed for consistency and clarity.
### Details:
Send test requests with different payloads to the /optimize-schedule endpoint. Check the logs to confirm all required fields are present and formatted as specified. Adjust the logging format, level, or configuration if necessary to ensure logs are clear, consistent, and easily parseable[2][5].

