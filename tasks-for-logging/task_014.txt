# Task ID: 14
# Title: Implement scheduler result processing logging (FEAT-LOG-007)
# Status: done
# Dependencies: 1
# Priority: high
# Description: Add logging for key information at the start of optimization result processing.
# Details:
In apps/scheduler/src/scheduler/results.ts, at the beginning of processOptimizationResults, add INFO level logging for: 1) The incoming response.status and response.message from the optimizer, 2) The number of routes and unassigned items received, 3) Clear indication when throwing an error due to a non-success status. This will help diagnose issues in the result processing phase.

# Test Strategy:
Test with various optimizer responses (success, failure, partial success) and verify logs correctly capture the status, message, and counts before processing begins.

# Subtasks:
## 1. Add logging framework setup in results.ts [done]
### Dependencies: None
### Description: Set up the logging framework in the results.ts file to enable INFO level logging for the optimization results processing
### Details:
Import the appropriate logging library (likely Winston or Pino based on the search results) and create a logger instance in the results.ts file. Configure the logger with the correct log level (INFO) and ensure it follows the project's structured logging format. The logger should be initialized at the file level so it can be used within the processOptimizationResults function.

## 2. Implement logging for optimizer response status and message [done]
### Dependencies: 14.1
### Description: Add logging statements at the beginning of processOptimizationResults to log the response status and message from the optimizer
### Details:
At the start of the processOptimizationResults function, add an INFO level log that captures and formats the response.status and response.message from the optimizer. Use structured logging with appropriate fields like 'status' and 'message' to make the logs easily searchable. The log message should clearly indicate this is the beginning of optimization result processing.

## 3. Implement logging for routes and unassigned items count [done]
### Dependencies: 14.1
### Description: Add logging statements to record the number of routes and unassigned items received from the optimizer
### Details:
After logging the response status and message, add another INFO level log that captures the count of routes and unassigned items. Extract this information from the optimizer response and include it in a structured log with fields like 'routesCount' and 'unassignedItemsCount'. This will provide visibility into the scale of the optimization results being processed.

## 4. Implement error logging for non-success status [done]
### Dependencies: 14.1, 14.2
### Description: Add clear error logging when throwing an error due to a non-success status from the optimizer
### Details:
In the section of code where errors are thrown due to non-success status, enhance the error handling to include detailed ERROR level logs before throwing the exception. The log should clearly indicate that an error is being thrown due to a non-success status and include all relevant details from the response that might help with debugging. Use appropriate error level and ensure the log message is descriptive enough to help diagnose issues without needing to add breakpoints.

