services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: postgres_db
    ports:
      - "5432:5432"
    env_file:
      - ../.env.test
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgREST API (Supabase-like REST interface)
  postgrest:
    image: postgrest/postgrest:v12.0.2
    container_name: postgrest_api
    ports:
      - "3000:3000"
    env_file:
      - ../.env.test
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy for PostgREST
  nginx:
    build:
      context: ./nginx
    container_name: nginx_proxy
    ports:
      - "3001:80"
    depends_on:
      - postgrest
    networks:
      - app-network
    restart: unless-stopped

  # Optimization Service
  optimize-service:
    build:
      context: ../apps/optimiser
      dockerfile: Dockerfile
    container_name: optimizer_service
    ports:
      - "8080:8080"
    env_file:
      - ../.env.test
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

# Define a custom network for better control
networks:
  app-network:
    driver: bridge

# Define named volumes
volumes:
  pgdata: 