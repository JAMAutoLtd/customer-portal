# Task ID: 10
# Title: Implement backend integration tests with Jest
# Status: pending
# Dependencies: 6, 8
# Priority: medium
# Description: Create Jest tests for scheduler logic validation
# Details:
Implement Jest integration tests in `tests/integration/scheduler/` corresponding to the 10 scenarios:
1. Create a test file for each scenario (e.g., `base_schedule.test.ts`)
2. Each test should:
   - Read baseline metadata from .baseline-metadata.json using readBaselineMetadata utility
   - Read scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata utility
   - Trigger the scheduler's /run-replan API endpoint
   - Implement waiting mechanism for the async replan process
   - Query the Staging DB to verify the final state
   - Include assertions for expected outcomes using ScenarioSeedResult for technician IDs and other test data
3. Implement helper functions for common operations

Tests should validate that the scheduler correctly handles each scenario according to business rules.

Integration tests rely on two metadata files:
- `.baseline-metadata.json` containing BaselineRefs for context
- `.current-scenario-metadata.json` containing ScenarioSeedResult with specific scenario record IDs, including technician IDs

Tests should NOT perform seeding themselves, but rather use the metadata from these files to perform comprehensive assertions. When verifying technician assignments in the `jobs.assigned_technician` column, always use the numeric DB IDs from `currentScenarioResult.insertedIds.technicianDbIds` rather than from baselineRefs. Additionally, tests should expect and utilize `technicianAuthIds` and `assignedVanIds` under the 'insertedIds' key in the .current-scenario-metadata.json file for comprehensive verification of technician-related data.

# Test Strategy:
Run each test after the corresponding scenario has been seeded externally. Verify that the tests correctly validate the scheduler's behavior and that all assertions pass. Check that the tests handle the asynchronous nature of the scheduler correctly. For technician verification, ensure tests are using the numeric DB IDs from `currentScenarioResult.insertedIds.technicianDbIds` (from .current-scenario-metadata.json) when verifying the `jobs.assigned_technician` column. Additionally, use `technicianAuthIds` and `assignedVanIds` from the same source when verifying other technician-related data. This ensures tests are validating against the correct technician records that were actually seeded for the test scenario.

# Subtasks:
## 1. Set up Jest integration test environment and utilities [done]
### Dependencies: None
### Description: Create the test infrastructure and helper functions needed for scheduler integration tests
### Details:
1. Create the directory structure for integration tests at `tests/integration/scheduler/`
2. Set up Jest configuration for integration tests in `jest.config.js` or a separate config file
3. Implement utility functions in `tests/integration/scheduler/utils.ts`:
   - Function to read baseline metadata from .baseline-metadata.json (readBaselineMetadata)
   - Function to read scenario metadata from .current-scenario-metadata.json (readCurrentScenarioMetadata)
   - Function to trigger the scheduler's /run-replan API endpoint
   - Function to wait for the async replan process to complete (with timeout and polling)
   - Function to query the Staging DB to verify final state
   - Function to clean up test data after tests
4. Create a base test class or setup/teardown functions for common test operations
5. Test the utility functions to ensure they work correctly

## 2. Implement base_schedule integration test [done]
### Dependencies: 10.1
### Description: Create integration test for the basic scheduling scenario
### Details:
1. Create `tests/integration/scheduler/base_schedule.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify jobs were scheduled correctly
     - Use both BaselineRefs and ScenarioSeedResult for comprehensive assertions
     - Assert that all jobs are assigned to appropriate technicians
     - Assert that time slots are allocated correctly
     - Verify no scheduling conflicts exist
4. Include proper test cleanup in afterEach/afterAll hooks

## 3. Implement equipment_conflict integration test [done]
### Dependencies: 10.1
### Description: Create integration test for scenarios with equipment conflicts
### Details:
1. Create `tests/integration/scheduler/equipment_conflict.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify conflict resolution
     - Use both BaselineRefs (for equipment context) and ScenarioSeedResult (for specific IDs)
     - Assert that jobs with equipment conflicts are scheduled sequentially
     - Verify equipment allocation follows priority rules
     - Check that no equipment is double-booked
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-28T18:40:19.006Z>
Add the following to the details section:

5. Review and update test assertions to work with the refactored seeding approach:
   - Ensure tests use `technicianDbIds` from the scenario result rather than assuming baseline technician IDs
   - When asserting equipment allocation, reference equipment through the scenario result objects
   - Add validation that equipment is properly assigned to the seeded technicians
   - Include assertions that verify the scheduler correctly identifies equipment conflicts between jobs
   - Test both cases where equipment conflicts are resolved by priority and by time constraints
6. Add specific test cases for:
   - Multiple technicians requiring the same equipment
   - Jobs with overlapping time windows competing for limited equipment
   - Priority-based resolution of equipment conflicts
7. Verify the test works with the updated seeding script that now includes technicians
8. Include error case testing where equipment requirements cannot be satisfied
</info added on 2025-04-28T18:40:19.006Z>

<info added on 2025-04-30T23:28:53.652Z>
<info added on 2025-05-01T14:22:37.006Z>
9. Implement specific test case for verifying the outcome of equipment_conflict.ts scenario:
   - Create a test that loads the equipment_conflict.ts scenario configuration
   - Verify that jobs with unresolvable equipment conflicts are marked as `pending_review` status
   - Assert that the scheduler adds appropriate notes to the job explaining the equipment conflict
   - Check that the conflict reason is properly recorded in the job's metadata
   - Verify the system correctly identifies which specific piece of equipment caused the conflict
   - Test that other jobs without equipment conflicts are scheduled normally
   - Ensure the conflict is properly reflected in the scheduler's output logs
10. Add validation for the conflict resolution workflow:
    - Verify the notification system is triggered for pending_review jobs
    - Test that the job remains in pending_review until manually resolved
    - Confirm that the UI would display the correct conflict information
</info added on 2025-05-01T14:22:37.006Z>
</info added on 2025-04-30T23:28:53.652Z>

## 4. Implement bundle_equipment_conflict integration test [done]
### Dependencies: 10.1, 10.3
### Description: Create integration test for scenarios with equipment conflicts in job bundles
### Details:
1. Create `tests/integration/scheduler/bundle_equipment_conflict.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify conflict resolution
     - Use numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds when verifying jobs.assigned_technician
     - Assert that bundled jobs are kept together when possible
     - Verify equipment allocation follows priority rules within bundles
     - Check that bundle integrity is maintained or appropriately broken based on business rules
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-28T18:40:27.148Z>
When verifying technician assignments or equipment allocation related to technicians, ensure you're using the numeric database IDs from `currentScenarioResult.insertedIds.technicianDbIds` rather than any string identifiers or names. This is critical because the database operations use these numeric IDs as foreign keys. For example, when checking job assignments:

```typescript
// CORRECT approach using DB IDs
const assignedTechId = job.assigned_technician;
const expectedTechId = currentScenarioResult.insertedIds.technicianDbIds['tech-1'];
expect(assignedTechId).toEqual(expectedTechId);

// INCORRECT approach using string identifiers
expect(job.assigned_technician).toEqual('tech-1'); // Will fail!
```

This applies to all database queries that verify technician assignments, equipment allocation, or any relationships involving technicians.
</info added on 2025-04-28T18:40:27.148Z>

<info added on 2025-04-30T23:29:04.745Z>
<info added on 2025-04-29T10:15:32.456Z>
When implementing the integration test for bundle_equipment_conflict, ensure you specifically verify that the bundle is broken when equipment conflicts cannot be resolved. The test should:

1. Confirm that jobs from the broken bundle are scheduled individually when equipment conflicts make bundling impossible:
```typescript
// Verify bundle is broken due to equipment conflicts
const bundledJobIds = ['job-1', 'job-2', 'job-3']; // IDs of jobs that were originally bundled
const scheduledJobs = await db.query('SELECT * FROM jobs WHERE job_id IN ($1, $2, $3)', 
  bundledJobIds.map(id => currentScenarioResult.insertedIds.jobDbIds[id]));

// Check that bundle_id is null or different for conflicting jobs
const uniqueBundleIds = new Set(scheduledJobs.map(job => job.bundle_id).filter(Boolean));
expect(uniqueBundleIds.size).toBeGreaterThan(1); // Jobs are in different bundles or not bundled
```

2. Verify that jobs with conflicting equipment requirements are assigned appropriate equipment:
```typescript
// Check equipment allocation for individually scheduled jobs
for (const job of scheduledJobs) {
  const jobEquipment = await db.query('SELECT * FROM job_equipment WHERE job_id = $1', [job.id]);
  // Verify each job has its required equipment allocated
  expect(jobEquipment.length).toBeGreaterThan(0);
  // No equipment should be double-booked at the same time
  // Add time-overlap equipment conflict check here
}
```

3. Include assertions that validate the scheduler's decision-making process by checking the scheduler_decisions table:
```typescript
// Verify scheduler recorded the bundle-breaking decision
const bundleDecisions = await db.query(
  'SELECT * FROM scheduler_decisions WHERE decision_type = $1 AND metadata->\'reason\' ? $2',
  ['BUNDLE_BROKEN', 'EQUIPMENT_CONFLICT']
);
expect(bundleDecisions.length).toBeGreaterThan(0);
```
</info added on 2025-04-29T10:15:32.456Z>
</info added on 2025-04-30T23:29:04.745Z>

## 5. Implement fixed_time_today integration test [done]
### Dependencies: 10.1
### Description: Create integration test for jobs with fixed time slots scheduled for today
### Details:
1. Create `tests/integration/scheduler/fixed_time_today.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify scheduling results
     - Use numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds when verifying jobs.assigned_technician
     - Assert that fixed-time jobs are scheduled exactly at their specified times
     - Verify that other jobs are scheduled around the fixed-time jobs
     - Check that no conflicts exist with fixed-time jobs
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-30T23:29:11.882Z>
The test should specifically verify that:

1. Jobs with `fixed_schedule_time` set to a time today are scheduled exactly at that time, with no deviation
2. The `job_assignments` table contains entries with `start_time` matching exactly the `fixed_schedule_time` from the job record
3. Test should include edge cases:
   - Fixed time jobs at the beginning of the day
   - Fixed time jobs at the end of the day
   - Multiple fixed time jobs for the same technician with sufficient travel time between them
4. Verify the `job_status` is updated to "scheduled" for these fixed time jobs
5. Include assertions that compare timestamps with millisecond precision using something like:
   ```typescript
   expect(new Date(jobAssignment.start_time).getTime()).toEqual(new Date(job.fixed_schedule_time).getTime());
   ```
6. Test should fail if any fixed time job is scheduled even slightly before or after its specified time
</info added on 2025-04-30T23:29:11.882Z>

## 6. Implement fixed_time_future_overflow integration test [done]
### Dependencies: 10.1, 10.5
### Description: Create integration test for fixed time jobs scheduled in the future with overflow handling
### Details:
1. Create `tests/integration/scheduler/fixed_time_future_overflow.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify scheduling results
     - Use numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds when verifying jobs.assigned_technician
     - Assert that fixed-time future jobs maintain their time slots
     - Verify that overflow is handled according to business rules
     - Check that jobs are appropriately distributed across days
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-30T23:29:19.409Z>
Add the following to the details section:

5. Specifically test the overflow scenario where:
   - Day 1 has insufficient capacity for all fixed-time jobs
   - Verify jobs with lower priority are pushed to Day+1 at exactly their fixed_schedule_time
   - Assert that high-priority jobs remain on their original day
   - Check database records to confirm job_schedule.fixed_schedule_time matches the assigned time
   - Verify the job_metadata table contains overflow_reason="capacity_constraint" for overflowed jobs
6. Include assertions that validate the scheduling algorithm preserves the exact time (hours/minutes) when moving jobs to the next day
7. Test edge cases where jobs are at the end of the working day and might overflow incorrectly
</info added on 2025-04-30T23:29:19.409Z>

## 7. Implement technician_unavailable_today integration test [done]
### Dependencies: 10.1
### Description: Create integration test for scenarios where technicians are unavailable on the current day
### Details:
1. Create `tests/integration/scheduler/technician_unavailable_today.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify scheduling results
     - Use numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds when verifying jobs.assigned_technician
     - Assert that no jobs are scheduled during technician unavailability periods
     - Verify that jobs are rescheduled to available time slots or different technicians
     - Check that business rules for handling unavailability are followed
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-30T23:29:27.363Z>
The test should specifically verify that:

1. When a technician has time-off recorded in the database for the current day, no jobs are assigned to them during those specific time windows
2. Check edge cases where jobs are scheduled immediately before or after unavailability periods
3. Verify the scheduler's prioritization logic when reassigning jobs:
   - Jobs should first attempt to be rescheduled with the same technician at a different time
   - If no suitable time exists, jobs should be assigned to qualified alternative technicians
   - Priority should be given to technicians with matching skills and proximity to job location
4. Include assertions that validate the `jobs.scheduling_metadata` JSON field contains appropriate reason codes when jobs are moved due to unavailability
5. Test both single-block unavailability (e.g., 2-hour appointment) and full-day unavailability scenarios
6. Verify that emergency/high-priority jobs follow override rules if configured in the system
</info added on 2025-04-30T23:29:27.363Z>

## 8. Implement availability_overflow_skip_day integration test [done]
### Dependencies: 10.1, 10.7
### Description: Create integration test for scenarios where a day must be skipped due to availability constraints
### Details:
1. Create `tests/integration/scheduler/availability_overflow_skip_day.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify scheduling results
     - Use numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds when verifying jobs.assigned_technician
     - Assert that days with no availability are skipped
     - Verify that jobs are appropriately scheduled on available days
     - Check that priority rules are followed when deciding which jobs to schedule first
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-30T23:29:33.754Z>
The test should specifically verify that:

1. When a technician has no availability on Day+1, jobs are correctly scheduled on Day+2 or later
2. Include assertions that verify no jobs are scheduled on Day+1
3. Check the job.scheduled_date values to confirm they skip the unavailable day
4. Implement test cases with different availability patterns:
   - Case 1: All technicians unavailable on Day+1
   - Case 2: Some technicians available on Day+1, others only on Day+2
5. Verify the scheduler's logging indicates recognition of the availability constraint
6. Test edge cases where high-priority jobs might need to wait for Day+2 despite urgency
7. Consider using test data fixtures that explicitly define the Day+1 availability gap
</info added on 2025-04-30T23:29:33.754Z>

## 9. Implement priority_conflict integration test [done]
### Dependencies: 10.1
### Description: Create integration test for scenarios with job priority conflicts
### Details:
1. Create `tests/integration/scheduler/priority_conflict.test.ts`
2. Import utility functions from the utils file
3. Implement test cases with:
   - `beforeAll` block that:
     - Reads baseline metadata from .baseline-metadata.json using readBaselineMetadata
     - Reads scenario metadata from .current-scenario-metadata.json using readCurrentScenarioMetadata
   - `it` blocks that:
     - Trigger the scheduler's replan process
     - Wait for the process to complete
     - Query the database to verify scheduling results
     - Use numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds when verifying jobs.assigned_technician
     - Assert that higher priority jobs are scheduled before lower priority ones
     - Verify that the priority resolution follows business rules
     - Check edge cases like equal priority conflicts
4. Include proper test cleanup in afterEach/afterAll hooks

<info added on 2025-04-30T23:29:41.520Z>
The integration test should specifically verify the priority_conflict.ts scenario where capacity constraints force the scheduler to choose between jobs. Key verification points:

1. Confirm the higher priority job (priority=1) is scheduled and assigned to a technician
2. Verify the lower priority job (priority=2) is left unscheduled with status="unscheduled"
3. Test with different priority combinations (1 vs 3, 2 vs 5, etc.) to ensure consistent behavior
4. Include edge case where two jobs have identical priority but only one can be scheduled (should use FIFO or job ID as tiebreaker)
5. Verify the scheduler's log output contains appropriate messages about priority-based decisions
6. Test the scenario with modified capacity to ensure both jobs get scheduled when constraints allow

Use assertions like:
```typescript
expect(highPriorityJob.status).toBe('scheduled');
expect(lowPriorityJob.status).toBe('unscheduled');
expect(highPriorityJob.assigned_technician).toBe(technicianId);
```
</info added on 2025-04-30T23:29:41.520Z>

## 12. Update existing tests to use technician IDs from ScenarioSeedResult [done]
### Dependencies: 10.1
### Description: Ensure all tests use technician IDs from currentScenarioResult.insertedIds.technicianIds
### Details:
1. Review the completed tests (base_schedule.test.ts and equipment_conflict.test.ts)
2. Identify where technician ID verification is performed
3. Add comments to indicate that these tests should be using technician IDs from currentScenarioResult.insertedIds.technicianIds
4. Create helper functions if needed to standardize technician ID access across all tests
5. Document the correct approach for future test implementations

## 13. Update technician verification to use technicianDbIds [pending]
### Dependencies: 10.12
### Description: Update pending tests to use numeric DB IDs from technicianDbIds for job assignment verification
### Details:
1. Create a helper function in utils.ts to easily access technicianDbIds from the scenario metadata
2. Document that when verifying the jobs.assigned_technician column in the database, tests should use the numeric DB IDs from currentScenarioResult.insertedIds.technicianDbIds
3. Update the test implementation guidelines to reflect this requirement
4. Ensure all pending test implementations follow this pattern
5. Create a code example showing the correct way to verify technician assignments

## 14. Implement helpers for technicianAuthIds and assignedVanIds verification [pending]
### Dependencies: 10.13
### Description: Create utility functions to access and verify technicianAuthIds and assignedVanIds in integration tests
### Details:
1. Update the utility functions in utils.ts to include helpers for accessing technicianAuthIds and assignedVanIds from the scenario metadata
2. Create example code showing how to properly verify:
   - Technician authentication IDs using currentScenarioResult.insertedIds.technicianAuthIds
   - Van assignments using currentScenarioResult.insertedIds.assignedVanIds
3. Document the expected structure of these fields in the .current-scenario-metadata.json file
4. Create helper functions that abstract away the details of accessing these IDs to make tests more readable
5. Update test implementation guidelines to include verification of these additional technician-related properties

## 15. Update test documentation for refactored technician ID structure [pending]
### Dependencies: 10.14
### Description: Update documentation to reflect the new technician ID structure in integration tests
### Details:
1. Create comprehensive documentation explaining the three types of technician IDs now available in tests:
   - technicianDbIds: Numeric database IDs used for database foreign key relationships
   - technicianAuthIds: Authentication IDs used in API calls and authentication contexts
   - assignedVanIds: IDs of vans assigned to technicians
2. Document when each type of ID should be used in test assertions
3. Create a reference guide showing examples of correct usage for each ID type
4. Update any existing test documentation to reflect these changes
5. Include this documentation in the project's test documentation or README files

## 16. Implement unschedulable_fixed_time integration test [done]
### Dependencies: 10.1
### Description: Verify outcome of unschedulable_fixed_time.ts scenario. Job with impossible fixed_schedule_time should end with status pending_review.
### Details:


## 17. Implement locked_job_impact integration test [done]
### Dependencies: 10.1
### Description: Verify outcome of locked_job_impact.ts scenario. Scheduler must respect en_route/in_progress job blockage and schedule other jobs around it.
### Details:


## 18. Implement same_location_jobs integration test [pending]
### Dependencies: 10.1
### Description: Create integration test for scenarios with multiple jobs at the same location.
### Details:


## 19. Implement long_duration_job integration test [pending]
### Dependencies: 10.1
### Description: Create integration test for scenarios with a single very long job impacting capacity.
### Details:


