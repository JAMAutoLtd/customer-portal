# Task ID: 11
# Title: Implement CLI runner script
# Status: done
# Dependencies: 3, 6, 9, 10
# Priority: medium
# Description: Create an interactive CLI for managing the test environment
# Details:
Implement the CLI runner script (`simulation/scripts/e2e-runner.ts`) using inquirer that:
1. Presents options to:
   - Clean Staging DB
   - Seed Baseline Data (prompting for technician count)
     - Should execute `index.ts baseline --output-metadata=.baseline-metadata.json`
   - Seed Specific Scenario (prompting for scenario name and tech count)
     - Should execute `index.ts scenario --name=[scenario_name] --baseline-metadata=.baseline-metadata.json --output-metadata=.current-scenario-metadata.json`
   - Run Backend Integration Tests
   - Run UI E2E Tests
   - Run Scenario Test (for a given scenario, e.g., 'base_schedule')
     - Should first execute the scenario seeding command with proper metadata parameters
     - Then immediately execute the corresponding Jest test (e.g., `pnpm test base_schedule.test.ts`)
   - Run Full Scenario Test (Clean -> Seed -> Jest -> Playwright)
   - Exit
2. Executes the corresponding pnpm scripts for each selected action
3. Handles errors gracefully during script execution
4. Provides clear feedback and logging
5. Manages metadata file paths correctly, ensuring they are properly passed between steps

Ensure the script can be run via `pnpm e2e:run`

# Test Strategy:
Test each option in the CLI runner to verify it correctly executes the corresponding actions. Verify that metadata files (.baseline-metadata.json and .current-scenario-metadata.json) are correctly generated and passed between steps. Check that user prompts work correctly and that error handling is robust. Specifically test the 'Seed Baseline' and 'Run Scenario Test' flows to ensure proper command execution and parameter passing.

# Subtasks:
## 1. Set up CLI structure with inquirer menu [done]
### Dependencies: None
### Description: Create the basic CLI structure with inquirer for interactive menu options
### Details:
1. Create the `simulation/scripts/e2e-runner.ts` file
2. Set up the basic CLI structure with inquirer.js
3. Define the main menu options as specified (Clean DB, Seed Baseline, etc.)
4. Implement the main program flow with async/await pattern
5. Set up the command-line entry point and ensure it can be run via `pnpm e2e:run`
6. Add appropriate type definitions
7. Test the basic menu navigation without actual command execution

Testing approach: Manually verify that the CLI displays all required options and navigation works correctly.

## 2. Implement command execution utilities [done]
### Dependencies: 11.1
### Description: Create utility functions to execute shell commands and scripts
### Details:
1. Create a utility module for executing shell commands using Node's child_process
2. Implement a function to execute commands and capture stdout/stderr
3. Add proper environment variable handling and argument passing
4. Implement timeout handling and process termination
5. Add colorized console output for better readability
6. Create helper functions for common command patterns
7. Test the utility functions with simple commands

Testing approach: Create simple test commands to verify the execution utilities work correctly, handling stdout, stderr, and exit codes properly.

## 3. Implement metadata file management [done]
### Dependencies: 11.1, 11.2
### Description: Create utilities to manage metadata files between different CLI operations
### Details:
1. Create functions to check for existence of metadata files
2. Implement utilities to read/write metadata files
3. Create a module to track and manage metadata file paths
4. Implement validation for metadata file contents
5. Add functions to generate proper command-line arguments for metadata files
6. Create helper functions to ensure metadata is properly passed between steps
7. Implement cleanup functions for temporary metadata files

Testing approach: Verify metadata files are correctly created, read, and passed between commands by running test sequences and examining file contents.

## 4. Implement action handlers for each menu option [done]
### Dependencies: 11.1, 11.2, 11.3
### Description: Create handler functions for each menu option that execute the appropriate commands
### Details:
1. Create separate handler functions for each menu option
2. Implement the Clean Staging DB action
3. Implement the Seed Baseline Data action with technician count prompting
4. Implement the Seed Specific Scenario action with scenario name and tech count prompting
5. Implement the Run Backend Integration Tests action
6. Implement the Run UI E2E Tests action
7. Implement the Run Scenario Test action with proper metadata handling
8. Implement the Run Full Scenario Test action that chains multiple commands
9. Implement the Exit action

Testing approach: Test each handler individually by selecting the corresponding menu option and verifying the correct commands are executed with proper arguments.

## 5. Add error handling, logging, and final integration [done]
### Dependencies: 11.1, 11.2, 11.3, 11.4
### Description: Implement robust error handling, logging, and integrate all components
### Details:
1. Implement comprehensive error handling for all command executions
2. Add informative error messages and suggestions for common failures
3. Implement a logging system with different verbosity levels
4. Add progress indicators for long-running operations
5. Implement graceful termination handling (Ctrl+C)
6. Add confirmation prompts for destructive operations
7. Perform final integration of all components
8. Add package.json script entry for `pnpm e2e:run`
9. Create documentation for the CLI usage

Testing approach: Perform end-to-end testing of the complete CLI, including error scenarios (e.g., missing files, failed commands) and verify proper error handling and recovery.

