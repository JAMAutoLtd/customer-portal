# Task ID: 9
# Title: Implement UI E2E tests with Playwright
# Status: pending
# Dependencies: 6, 7
# Priority: medium
# Description: Create Playwright tests for core UI flows
# Details:
Implement Playwright E2E tests in `tests/e2e/specs/` covering:
1. User Registration tests:
   - Successful registration
   - Attempted registration with existing email
   - Attempted registration with invalid input
2. Order Placement tests:
   - Successful order placement by logged-in user
   - Attempted order placement with missing fields

Each test should:
- Use Page Object Models for maintainability
- Use locators to interact with UI elements
- Include assertions to verify UI state and navigation
- Handle authentication and session management
- Clean up created data after tests

Tests should be designed to run against the seeded database scenarios.

# Test Strategy:
Run the tests against a local instance with seeded data. Verify that all tests pass and correctly validate the UI functionality. Check that tests handle edge cases and error conditions correctly.

# Subtasks:
## 1. Set up Playwright testing environment and configuration [pending]
### Dependencies: None
### Description: Configure Playwright for E2E testing, including installation, project setup, and base configuration
### Details:
Implementation steps:
1. Install Playwright and required dependencies: `npm install -D @playwright/test`
2. Run Playwright installation: `npx playwright install`
3. Create a `playwright.config.ts` file with appropriate configuration:
   - Configure browsers (Chromium, Firefox, WebKit)
   - Set up base URL for testing
   - Configure test timeouts and retries
   - Set up test reporting options
4. Create the directory structure for tests:
   - `tests/e2e/specs/` for test files
   - `tests/e2e/pages/` for Page Object Models
   - `tests/e2e/utils/` for test utilities
5. Create a basic test to verify setup is working
6. Add npm scripts for running tests in package.json

Testing approach:
- Run a simple smoke test to verify Playwright is correctly installed and configured
- Ensure tests can connect to the application environment

## 2. Implement Page Object Models for authentication and registration [pending]
### Dependencies: 9.1
### Description: Create reusable Page Object Models for login, registration, and common UI components
### Details:
Implementation steps:
1. Create a `BasePage` class with common methods:
   - Navigation helpers
   - Element interaction methods
   - Waiting and assertion utilities
2. Create `LoginPage` class extending BasePage:
   - Define locators for email, password fields, and login button
   - Implement login method
   - Add validation message handling
3. Create `RegistrationPage` class extending BasePage:
   - Define locators for all registration form fields
   - Implement registration method with parameters
   - Add methods to handle validation errors
4. Create `HeaderComponent` for navigation and authentication state
5. Document usage patterns for the Page Objects

Testing approach:
- Create small test snippets to verify each Page Object works correctly
- Ensure locators are robust and will work across different browser environments

## 3. Implement User Registration E2E tests [pending]
### Dependencies: 9.1, 9.2
### Description: Create E2E tests for user registration flows, including success and failure scenarios
### Details:
Implementation steps:
1. Create `registration.spec.ts` in the specs directory
2. Implement test for successful registration:
   - Navigate to registration page
   - Fill in valid user details
   - Submit the form
   - Verify successful registration (redirect, welcome message)
   - Verify user can log in with new credentials
3. Implement test for registration with existing email:
   - Use a known existing email from test data
   - Attempt registration
   - Verify appropriate error message
4. Implement test for invalid input registration:
   - Test with missing required fields
   - Test with invalid email format
   - Test with password validation rules
   - Verify field-specific error messages
5. Implement test data cleanup after tests

Testing approach:
- Use unique email addresses for each test run (timestamps or random values)
- Verify both UI feedback and application state
- Add appropriate assertions for each step
- Ensure tests are independent and can run in isolation

## 4. Implement Order Placement Page Objects and utilities [pending]
### Dependencies: 9.1, 9.2
### Description: Create Page Object Models and utilities for the order placement flow
### Details:
Implementation steps:
1. Create `ProductListPage` class:
   - Methods to browse and select products
   - Add to cart functionality
   - Product filtering/search if applicable
2. Create `CartPage` class:
   - Methods to view cart contents
   - Update quantities
   - Proceed to checkout
3. Create `CheckoutPage` class:
   - Methods to fill shipping/billing information
   - Payment method selection
   - Order submission
4. Create `OrderConfirmationPage` class:
   - Methods to verify order details
   - Order number extraction
5. Create utilities for test data generation:
   - Random address generator
   - Payment information generator
   - Order details validator

Testing approach:
- Create small test snippets to verify each Page Object works correctly
- Test with different product configurations
- Ensure methods handle empty states and edge cases

## 5. Implement Order Placement E2E tests [pending]
### Dependencies: 9.1, 9.2, 9.3, 9.4
### Description: Create E2E tests for the order placement flow, including success and validation scenarios
### Details:
Implementation steps:
1. Create `order-placement.spec.ts` in the specs directory
2. Implement authentication state setup:
   - Create utility to pre-authenticate user
   - Set up test hooks for login state management
3. Implement successful order placement test:
   - Start with authenticated user
   - Browse and add products to cart
   - Proceed to checkout
   - Fill in all required information
   - Complete order
   - Verify order confirmation
4. Implement validation test for missing fields:
   - Start with authenticated user
   - Add products to cart
   - Proceed to checkout
   - Submit with missing required fields
   - Verify appropriate validation messages
5. Implement test data cleanup:
   - Create utility to cancel/delete test orders
   - Clean up any created data after tests

Testing approach:
- Use test hooks for setup and teardown
- Verify both UI feedback and application state
- Add appropriate assertions for each step
- Test with different product combinations
- Ensure tests clean up after themselves

