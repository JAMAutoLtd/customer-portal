# Task ID: 12
# Title: Implement Production to Staging migration utility
# Status: pending
# Dependencies: 2, 3
# Priority: low
# Description: Create a script to migrate and anonymize data from Production to Staging
# Details:
Implement the migration script (`simulation/scripts/db/migrate-prod-to-staging.ts`) that:
1. Connects to Production Supabase using separate credentials
2. Includes extreme warnings and multiple confirmation prompts
3. Fetches data (read-only) from Production tables
4. Anonymizes/masks PII using @faker-js/faker:
   - User names, emails, phones
   - Addresses
   - VINs
   - Notes
   - Other sensitive information
5. Maintains relational integrity by mapping original Production FKs to new Staging FKs
6. Inserts anonymized data into Staging
7. Offers option to clean Staging before migration

Ensure the script handles large datasets efficiently and maintains data consistency.

# Test Strategy:
Test the script with a small subset of production data. Verify that all PII is properly anonymized and that relational integrity is maintained. Check that confirmation prompts work correctly and that the script handles errors gracefully.

# Subtasks:
## 1. Set up secure database connections to Production and Staging [pending]
### Dependencies: None
### Description: Implement secure connection utilities for both Production and Staging Supabase environments with proper credential management
### Details:
1. Create a connection utility module in `simulation/scripts/db/utils/db-connection.ts`
2. Implement functions to establish connections to both Production and Staging Supabase instances
3. Set up secure credential management using environment variables or a secure config file (not committed to git)
4. Add connection pooling for efficient database operations
5. Implement connection error handling and retry logic
6. Add logging for connection events
7. Test connections to both environments with read-only queries
8. Document the connection approach and security considerations

## 2. Implement warning and confirmation UI for migration script [pending]
### Dependencies: 12.1
### Description: Create a robust CLI interface with clear warnings and multiple confirmation prompts to prevent accidental execution
### Details:
1. Use a CLI framework like commander.js or inquirer.js for interactive prompts
2. Implement a multi-stage confirmation process with explicit warnings about Production access
3. Add color-coded warnings (red for danger) using chalk or similar
4. Require explicit typing of confirmation phrases like 'I UNDERSTAND THE RISKS'
5. Add a final countdown timer before execution begins
6. Implement the option to clean Staging before migration with separate confirmation
7. Create a dry-run mode that shows what would happen without making changes
8. Test the UI flow with different user inputs to ensure safety

## 3. Create data extraction module for Production tables [pending]
### Dependencies: 12.1
### Description: Implement a module to safely extract data from Production tables while respecting database schema and relationships
### Details:
1. Create `simulation/scripts/db/utils/data-extractor.ts`
2. Implement functions to query and extract data from all relevant Production tables
3. Use schema_reference to determine table dependencies and extraction order
4. Add pagination for handling large datasets efficiently
5. Implement read-only transaction guarantees
6. Add progress indicators for long-running extractions
7. Create data validation to ensure extracted data is complete and valid
8. Test with representative data volumes to ensure performance

## 4. Develop PII anonymization utilities [pending]
### Dependencies: 12.3
### Description: Create comprehensive utilities to anonymize all types of personally identifiable information while maintaining data realism
### Details:
1. Create `simulation/scripts/db/utils/anonymizer.ts`
2. Implement specialized functions for each PII type using @faker-js/faker:
   - User names, emails, phones anonymization
   - Address anonymization with realistic formatting
   - VIN anonymization that maintains valid format
   - Notes and free text sanitization
   - Other sensitive field handling
3. Ensure consistent anonymization (same original value always maps to same fake value)
4. Add configuration options for anonymization strength
5. Create unit tests for each anonymization function
6. Document the anonymization approach for each data type
7. Test with edge cases like international formats and special characters

## 5. Implement foreign key mapping and relationship maintenance [pending]
### Dependencies: 12.3, 12.4
### Description: Create a system to maintain relational integrity by mapping Production primary keys to new Staging foreign keys
### Details:
1. Create `simulation/scripts/db/utils/relation-mapper.ts`
2. Implement a key mapping registry to track original and new IDs
3. Create functions to update foreign key references in anonymized data
4. Handle circular references and complex relationships
5. Implement integrity validation to ensure no orphaned records
6. Add logging for relationship mapping operations
7. Create visualization of relationship maps for debugging
8. Test with complex data relationships to ensure integrity is maintained

## 6. Implement efficient data insertion into Staging [pending]
### Dependencies: 12.1, 12.4, 12.5
### Description: Create a module to efficiently insert anonymized data into Staging while handling large datasets
### Details:
1. Create `simulation/scripts/db/utils/data-inserter.ts`
2. Implement batch insertion functions for optimal performance
3. Add transaction support to ensure atomicity
4. Implement error handling and partial failure recovery
5. Add progress tracking and reporting
6. Create functions for pre-insertion cleanup (optional)
7. Implement insertion order logic based on foreign key dependencies
8. Test with large datasets to ensure performance and reliability

## 7. Develop validation and reporting for migrated data [pending]
### Dependencies: 12.6
### Description: Create comprehensive validation and reporting to verify successful migration and data integrity
### Details:
1. Create `simulation/scripts/db/utils/migration-validator.ts`
2. Implement count verification between source and destination
3. Add data sampling validation to verify anonymization quality
4. Create relationship integrity checks
5. Implement comprehensive reporting with statistics on migrated data
6. Add error summaries and resolution suggestions
7. Create a final validation report file
8. Test validation with intentionally corrupted data to ensure detection capabilities

