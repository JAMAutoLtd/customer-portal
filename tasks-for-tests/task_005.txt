# Task ID: 5
# Title: Implement scenario seeding scripts
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Create scripts for seeding specific test scenarios on top of baseline data
# Details:
Implement 10 scenario seeding scripts in `simulation/scripts/db/seed/scenarios/` for:
1. base_schedule.ts: Standard scheduling flow
2. equipment_conflict.ts: Job requires equipment no technician has
3. bundle_equipment_conflict.ts: Multi-job order requires equipment split across techs
4. fixed_time_today.ts: Job fixed for today
5. fixed_time_future_overflow.ts: Job fixed for tomorrow
6. technician_unavailable_today.ts: Tech unavailable for a block today
7. availability_overflow_skip_day.ts: All techs unavailable tomorrow, jobs skip to Day+2
8. priority_conflict.ts: High vs. Low priority jobs compete for limited capacity
9. same_location_jobs.ts: Multiple jobs at one address
10. long_duration_job.ts: One very long job impacting capacity

Each script should:
- Use IDs/references from baseline seed run to maintain relational integrity
- Generate dynamic data using @faker-js/faker
- Return metadata (IDs of created records) for test verification
- Import core DB types (Database, Tables, TablesInsert, Enums) from 'simulation/scripts/utils/index.ts'
- Use TablesInsert<'table_name'> to type data arrays for insertion
- Use the insertData utility which returns Promise<{ data: Row[] | null, error: PostgrestError | null }>
- Check returned objects for 'error' and null 'data'
- Use actual IDs from returned 'data' arrays when linking records
- Return actual created record IDs in the ScenarioMetadataUpdate object
- Use technician IDs provided via the router - DO NOT call seedScenarioTechnicians directly

Each scenario subtask (5.1, 5.2, etc.) must implement its seed function to return an object conforming to the standard `ScenarioSeedResult` interface defined in `./scenarios/types.ts`, including the `scenarioName` and `insertedIds` for records created by that specific scenario.

Scenario seeding scripts (subtasks 5.1+) should focus on creating scenario-specific data using the provided `BaselineRefs` argument (which includes technician IDs) and returning the `ScenarioSeedResult`. They do *not* read or write metadata files themselves; file I/O is handled by the main seeding script (`index.ts`).

# Test Strategy:
Test each scenario script individually after running the baseline seed. Verify that the correct records are created with the expected relationships and that the returned metadata is accurate. Ensure each scenario correctly uses the technician IDs provided via the router rather than attempting to seed its own technicians.

# Subtasks:
## 1. Define shared types for scenario seeding [done]
### Dependencies: None
### Description: Create TypeScript interfaces for baseline references and scenario metadata that will be used across all scenario seeding scripts
### Details:
1. Create a new file `simulation/scripts/db/seed/scenarios/types.ts`
2. Define `BaselineRefs` interface to contain references to baseline data (IDs of customers, technicians, equipment, etc.)
3. Define `ScenarioMetadataUpdate` interface to track IDs of newly created records for test verification
4. Define any helper types needed for specific scenarios
5. Export all types for use in scenario scripts
6. Test by importing types in a test file to verify they compile correctly

## 2. Implement base_schedule.ts scenario script [done]
### Dependencies: 5.1
### Description: Create the standard scheduling flow scenario script that builds on baseline data
### Details:
1. Create `simulation/scripts/db/seed/scenarios/base_schedule.ts`
2. Implement `seedScenario_base_schedule` function that accepts `baselineData: BaselineRefs`
3. Create standard jobs with normal priority, duration, and equipment requirements
4. Ensure jobs are schedulable with available technicians
5. Return `ScenarioMetadataUpdate` with IDs of created records
6. Add appropriate comments explaining the scenario
7. Test by running the script and verifying jobs are created and schedulable

## 3. Implement equipment_conflict.ts scenario script [pending]
### Dependencies: 5.1
### Description: Create scenario where a job requires equipment that no technician has
### Details:
1. Create `simulation/scripts/db/seed/scenarios/equipment_conflict.ts`
2. Implement `seedScenario_equipment_conflict` function that accepts `baselineData: BaselineRefs`
3. Import core DB types (Database, Tables, TablesInsert, Enums) and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create a new equipment type not assigned to any technician using TablesInsert<'equipment'>
6. Use insertData utility to insert the equipment and check for errors
7. Create a job that requires this equipment using TablesInsert<'jobs'>
8. Use the actual equipment ID from the returned data when creating the job
9. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
10. Add appropriate comments explaining the expected scheduling outcome
11. Test by running the script and verifying the equipment conflict exists
12. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
13. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 4. Implement bundle_equipment_conflict.ts scenario script [pending]
### Dependencies: 5.1
### Description: Create scenario with a multi-job order requiring equipment split across different technicians
### Details:
1. Create `simulation/scripts/db/seed/scenarios/bundle_equipment_conflict.ts`
2. Implement `seedScenario_bundle_equipment_conflict` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create a service order using TablesInsert<'service_orders'>
6. Use insertData to insert the order and check for errors
7. Create multiple jobs using TablesInsert<'jobs'> with different equipment requirements
8. Use the actual order ID from the returned data when creating the jobs
9. Ensure each job requires different equipment possessed by different technicians
10. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
11. Add appropriate comments explaining the expected scheduling challenge
12. Test by running the script and verifying the equipment distribution across technicians
13. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
14. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 5. Implement fixed_time_today.ts scenario script [pending]
### Dependencies: 5.1
### Description: Create scenario with a job that must be scheduled at a specific time today
### Details:
1. Create `simulation/scripts/db/seed/scenarios/fixed_time_today.ts`
2. Implement `seedScenario_fixed_time_today` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create a service order using TablesInsert<'service_orders'>
6. Use insertData to insert the order and check for errors
7. Create a job with a fixed time slot for today using TablesInsert<'jobs'>
8. Use the actual order ID from the returned data when creating the job
9. Ensure the time slot is during working hours
10. When creating the job with fixed assignment, use one of the technician IDs from baselineData.technicianDbIds
11. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
12. Add appropriate comments explaining the fixed time constraint
13. Test by running the script and verifying the job has the correct fixed time
14. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
15. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 6. Implement fixed_time_future_overflow.ts scenario script [pending]
### Dependencies: 5.1
### Description: Create scenario with a job fixed for tomorrow that may cause scheduling overflow
### Details:
1. Create `simulation/scripts/db/seed/scenarios/fixed_time_future_overflow.ts`
2. Implement `seedScenario_fixed_time_future_overflow` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create a service order using TablesInsert<'service_orders'>
6. Use insertData to insert the order and check for errors
7. Create several jobs for tomorrow to fill capacity using TablesInsert<'jobs'>
8. Create an additional job with a fixed time for tomorrow
9. Use the actual order ID from the returned data when creating the jobs
10. When creating the fixed time job, use one of the technician IDs from baselineData.technicianDbIds
11. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
12. Add appropriate comments explaining the expected overflow behavior
13. Test by running the script and verifying the capacity constraints
14. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
15. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 7. Implement technician_unavailable_today.ts scenario script [done]
### Dependencies: 5.1
### Description: Create scenario where a technician is unavailable for a specific time block today
### Details:
1. Create `simulation/scripts/db/seed/scenarios/technician_unavailable_today.ts`
2. Implement `seedScenario_technician_unavailable_today` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Create a technician unavailability record for a specific time block today using TablesInsert<'technician_unavailability'>
5. Use insertData to insert the unavailability and check for errors
6. Create a service order using TablesInsert<'service_orders'>
7. Create jobs that would normally be assigned to this technician using TablesInsert<'jobs'>
8. Use the actual order ID from the returned data when creating the jobs
9. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
10. Add appropriate comments explaining the unavailability constraint
11. Test by running the script and verifying the technician unavailability is correctly set
12. Focus only on creating scenario-specific data and returning the result - do not handle file I/O

## 8. Implement availability_overflow_skip_day.ts scenario script [pending]
### Dependencies: 5.1
### Description: Create scenario where all technicians are unavailable tomorrow, forcing jobs to be scheduled on Day+2
### Details:
1. Create `simulation/scripts/db/seed/scenarios/availability_overflow_skip_day.ts`
2. Implement `seedScenario_availability_overflow_skip_day` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create unavailability records for all technicians for the entire day tomorrow using TablesInsert<'technician_unavailability'>
6. Use insertData to insert the unavailabilities and check for errors
7. Create a service order using TablesInsert<'service_orders'>
8. Create several jobs that need to be scheduled using TablesInsert<'jobs'>
9. Use the actual order ID from the returned data when creating the jobs
10. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
11. Add appropriate comments explaining the expected day-skipping behavior
12. Test by running the script and verifying all technicians are unavailable tomorrow
13. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
14. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 9. Implement priority_conflict.ts scenario script [pending]
### Dependencies: 5.1
### Description: Create scenario with high and low priority jobs competing for limited capacity
### Details:
1. Create `simulation/scripts/db/seed/scenarios/priority_conflict.ts`
2. Implement `seedScenario_priority_conflict` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create service orders for high and low priority jobs using TablesInsert<'service_orders'>
6. Use insertData to insert the orders and check for errors
7. Create several high-priority jobs using TablesInsert<'jobs'>
8. Create several low-priority jobs for the same time period using TablesInsert<'jobs'>
9. Use the actual order IDs from the returned data when creating the jobs
10. Ensure there's not enough capacity for all jobs by creating more jobs than available technician capacity
11. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
12. Add appropriate comments explaining the priority resolution expectations
13. Test by running the script and verifying the priority levels are set correctly
14. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
15. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 10. Implement same_location_jobs.ts scenario script [done]
### Dependencies: 5.1
### Description: Create scenario with multiple jobs at the same customer location
### Details:
1. Create `simulation/scripts/db/seed/scenarios/same_location_jobs.ts`
2. Implement `seedScenario_same_location_jobs` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create a customer with a specific address using TablesInsert<'customers'>
6. Use insertData to insert the customer and check for errors
7. Create a service order for this customer using TablesInsert<'service_orders'>
8. Use the actual customer ID from the returned data when creating the order
9. Create multiple jobs for this customer at the same location using TablesInsert<'jobs'>
10. Use the actual order ID from the returned data when creating the jobs
11. Vary job types and requirements
12. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
13. Add appropriate comments explaining the location optimization opportunity
14. Test by running the script and verifying all jobs share the same location
15. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
16. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 11. Implement long_duration_job.ts scenario script [done]
### Dependencies: 5.1
### Description: Create scenario with one very long job that impacts scheduling capacity
### Details:
1. Create `simulation/scripts/db/seed/scenarios/long_duration_job.ts`
2. Implement `seedScenario_long_duration_job` function that accepts `baselineData: BaselineRefs`
3. Import core DB types and insertData utility from 'simulation/scripts/utils/index.ts'
4. Use the technician IDs provided in baselineData.technicianDbIds
5. Create a service order using TablesInsert<'service_orders'>
6. Use insertData to insert the order and check for errors
7. Create one job with an unusually long duration (4+ hours) using TablesInsert<'jobs'>
8. Create several normal-duration jobs using TablesInsert<'jobs'>
9. Use the actual order ID from the returned data when creating the jobs
10. Ensure the long job significantly impacts available capacity
11. Return a `ScenarioSeedResult` object with `scenarioName` and `insertedIds` for created records
12. Add appropriate comments explaining the capacity impact
13. Test by running the script and verifying the long job has the correct duration
14. Focus only on creating scenario-specific data and returning the result - do not handle file I/O
15. Do NOT call seedScenarioTechnicians - use the technician IDs provided in baselineData

## 13. Test all scenarios with updated technician handling [pending]
### Dependencies: None
### Description: Verify all scenarios work correctly with the new centralized technician seeding approach
### Details:
1. Run each scenario individually to verify it correctly uses the provided technician IDs
2. Verify that jobs are correctly assigned to the provided technicians
3. Check that equipment assignments work correctly with the provided technicians
4. Verify that technician unavailability scenarios function as expected
5. Test the scheduling algorithm with the updated scenarios to ensure it produces expected results
6. Document any issues or unexpected behaviors
7. Fix any issues found during testing
8. Confirm that the main seeder correctly adds technician IDs to the output metadata JSON

